                         Прогр Elevator{
/* Демонстрационная программа управления эталонным процессом
   

   ДАТА СОЗДАНИЯ:              01.10.2012  
   ДАТЫ КОРРЕКЦИИ:              
*/



 ТАКТ     10;    /* период активизации равен 100 миллисекундам */

/*###########################################################*/
/*#########                     #############################*/
/*#########  ОПИСАНИЕ КОНСТАНТ  #############################*/
/*#########                     #############################*/
/*###########################################################*/

 КОНСТ ВКЛ                1;
 КОНСТ ВЫКЛ               0;

/*###########################################################*/
/*########                                          #########*/
/*########  ОПИСАНИЕ РЕГИСТРОВ МОДУЛЕЙ УСО          #########*/
/*########                                          #########*/
/*###########################################################*/
                        
ВХОД  ЛОГ_ВХОДЫ1  0 0 8; /* имя, базовый адрес, ь Регистра, 8бит */
ВЫХОД ЛОГ_ВЫХОДЫ1 0 0 8;

/*###########################################################*/
/*########                                          #########*/
/*########  ПРОЦЕССЫ                                #########*/
/*########                                          #########*/
/*###########################################################*/

/*
 * Процесс Инициализация. Служит для
 * развертывания программы. Этот процесс (описанный
 * первым) - единственно активный процесс по запуску.
 * Кроме этого, процесс Инициализация содержит описание 
 * переменных для ссылок из других
 * процессов. Это удобно: описания локализованы в одном
 * месте.
*/

ПРОЦ Инициализация{

/*===========================================================*/
/*=========== ОПИСАНИЕ ПЕРЕМЕННЫХ ===========================*/
/*===========================================================*/

/* ВХОДНЫЕ СИГНАЛЫ: 
тип, имя,                 модуль УСО, 1 бит, "видимость" из др. процессов */ 
/* ВХОДНЫЕ СИГНАЛЫ: */
ЛОГ К_ЗАКРЫТО_ЭТАЖ_5  = {ЛОГ_ВХОДЫ1[1]} ДЛЯ ВСЕХ;
ЛОГ К_ЗАКРЫТО_ЭТАЖ_4  = {ЛОГ_ВХОДЫ1[1]} ДЛЯ ВСЕХ;
ЛОГ К_ЗАКРЫТО_ЭТАЖ_3  = {ЛОГ_ВХОДЫ1[1]} ДЛЯ ВСЕХ;
ЛОГ К_ЗАКРЫТО_ЭТАЖ_2  = {ЛОГ_ВХОДЫ1[1]} ДЛЯ ВСЕХ;
ЛОГ К_ЗАКРЫТО_ЭТАЖ_1  = {ЛОГ_ВХОДЫ1[1]} ДЛЯ ВСЕХ;

ЛОГ К_ОТКРЫТО_ЭТАЖ_5  = {ЛОГ_ВХОДЫ1[1]} ДЛЯ ВСЕХ;
ЛОГ К_ОТКРЫТО_ЭТАЖ_4  = {ЛОГ_ВХОДЫ1[1]} ДЛЯ ВСЕХ;
ЛОГ К_ОТКРЫТО_ЭТАЖ_3  = {ЛОГ_ВХОДЫ1[1]} ДЛЯ ВСЕХ;
ЛОГ К_ОТКРЫТО_ЭТАЖ_2  = {ЛОГ_ВХОДЫ1[1]} ДЛЯ ВСЕХ;
ЛОГ К_ОТКРЫТО_ЭТАЖ_1  = {ЛОГ_ВХОДЫ1[1]} ДЛЯ ВСЕХ;

ЛОГ К_ЛИФТ_НА_ЭТАЖЕ_5 = {ЛОГ_ВХОДЫ1[1]} ДЛЯ ВСЕХ;
ЛОГ К_ЛИФТ_НА_ЭТАЖЕ_4 = {ЛОГ_ВХОДЫ1[1]} ДЛЯ ВСЕХ;
ЛОГ К_ЛИФТ_НА_ЭТАЖЕ_3 = {ЛОГ_ВХОДЫ1[1]} ДЛЯ ВСЕХ;
ЛОГ К_ЛИФТ_НА_ЭТАЖЕ_2 = {ЛОГ_ВХОДЫ1[1]} ДЛЯ ВСЕХ;
ЛОГ К_ЛИФТ_НА_ЭТАЖЕ_1 = {ЛОГ_ВХОДЫ1[1]} ДЛЯ ВСЕХ;

/* ВЫХОДНЫЕ СИГНАЛЫ (т.к. привязаны к модулю выходов): */ 
ЛОГ У_ЗАКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_5  = {ЛОГ_ВЫХОДЫ1[1]} ДЛЯ ВСЕХ;
ЛОГ У_ЗАКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_4  = {ЛОГ_ВЫХОДЫ1[1]} ДЛЯ ВСЕХ;
ЛОГ У_ЗАКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_3  = {ЛОГ_ВЫХОДЫ1[1]} ДЛЯ ВСЕХ;
ЛОГ У_ЗАКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_2  = {ЛОГ_ВЫХОДЫ1[1]} ДЛЯ ВСЕХ;
ЛОГ У_ЗАКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_1  = {ЛОГ_ВЫХОДЫ1[1]} ДЛЯ ВСЕХ;

ЛОГ У_ОТКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_5  = {ЛОГ_ВЫХОДЫ1[1]} ДЛЯ ВСЕХ;
ЛОГ У_ОТКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_4  = {ЛОГ_ВЫХОДЫ1[1]} ДЛЯ ВСЕХ;
ЛОГ У_ОТКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_3  = {ЛОГ_ВЫХОДЫ1[1]} ДЛЯ ВСЕХ;
ЛОГ У_ОТКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_2  = {ЛОГ_ВЫХОДЫ1[1]} ДЛЯ ВСЕХ;
ЛОГ У_ОТКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_1  = {ЛОГ_ВЫХОДЫ1[1]} ДЛЯ ВСЕХ;

ЛОГ У_ЛИФТ_ВВЕРХ  = {ЛОГ_ВЫХОДЫ1[1]} ДЛЯ ВСЕХ;
ЛОГ У_ ЛИФТ_ВНИЗ  = {ЛОГ_ВЫХОДЫ1[1]} ДЛЯ ВСЕХ;
                
/*########  СОСТОЯНИЯ ПРОЦЕССА  #########*/
 СОСТ Начало{  /* именно отсюда все и начинается после включения питания */
ЛОГ У_ЗАКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_5  = ВЫКЛ; /* выключаем все */
ЛОГ У_ЗАКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_4  = ВЫКЛ; 
ЛОГ У_ЗАКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_3  = ВЫКЛ; ;
ЛОГ У_ЗАКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_2  = ВЫКЛ; ;
ЛОГ У_ЗАКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_1  = ВЫКЛ; ;

ЛОГ У_ОТКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_5  = ВЫКЛ; ;
ЛОГ У_ОТКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_4  = ВЫКЛ; ;
ЛОГ У_ОТКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_3  = ВЫКЛ; ;
ЛОГ У_ОТКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_2  = ВЫКЛ; ;
ЛОГ У_ОТКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_1  = ВЫКЛ; ;

ЛОГ У_ЛИФТ_ВВЕРХ  = ВЫКЛ; ;
ЛОГ У_ ЛИФТ_ВНИЗ  = ВЫКЛ; ;
     
  СТАРТ ПРОЦ УправлениеДверьми;    /* запускаем процессы */
  СТАРТ ПРОЦ УправлениеЛИфтом; 
  СТОП;                        /* останов */  
 }
}

ПРОЦ УправлениеДверьми {
ИЗ ПРОЦ Инициализация  
К_ЗАКРЫТО_ЭТАЖ_5,  
К_ЗАКРЫТО_ЭТАЖ_4, 
К_ЗАКРЫТО_ЭТАЖ_3,  
К_ЗАКРЫТО_ЭТАЖ_2, 
К_ЗАКРЫТО_ЭТАЖ_1, 
К_ОТКРЫТО_ЭТАЖ_5,  
К_ОТКРЫТО_ЭТАЖ_4, 
К_ОТКРЫТО_ЭТАЖ_3, 
К_ОТКРЫТО_ЭТАЖ_2, 
К_ОТКРЫТО_ЭТАЖ_1,
У_ЗАКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_5,  
У_ЗАКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_4, 
У_ЗАКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_3, 
У_ЗАКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_2, 
У_ЗАКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_1, 
У_ОТКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_5, 
У_ОТКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_4, 
У_ОТКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_3, 
У_ОТКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_2, 
У_ОТКРЫТЬ_ДВЕРИ_НА_ЭТАЖЕ_1; 

  СОСТ Начало{
   
   ЕСЛИ (К_1_БАК) {
       У_ВКЛ_СОПЛО_1           = ВЫКЛ;
   }
   ЕСЛИ (К_БАК_ПУСТ) {
       У_ВКЛ_СОПЛО_1           = ВКЛ;
   }

   ЕСЛИ (К_ТАЧКА_ПОД_ДАТЧИКОМ && !К_ТАЧКА_ПОЛНА) {
       У_ВКЛ_ТАЧКА             = ВЫКЛ;       
       У_ВКЛ_СОПЛО_ГЛАВНОЕ     = ВКЛ;
       У_ВКЛ_СОПЛО_1           = ВЫКЛ;
       У_ВКЛ_СОПЛО_2           = ВЫКЛ; 
       У_ВКЛ_СОПЛО_3           = ВЫКЛ;
       У_ВКЛ_ТАЧКА             = ВЫКЛ;

   }
   ЕСЛИ (К_ТАЧКА_ПОД_ДАТЧИКОМ && К_ТАЧКА_ПОЛНА) {
       У_ВКЛ_СОПЛО_ГЛАВНОЕ     = ВЫКЛ;
       У_ВКЛ_СОПЛО_1           = ВЫКЛ;
       У_ВКЛ_СОПЛО_2           = ВЫКЛ; 
       У_ВКЛ_СОПЛО_3           = ВЫКЛ;
       У_ВКЛ_ТАЧКА             = ВКЛ;
   }


   ЗАЦИКЛИТЬ; /* снимем контроль ошибки по отсутствию перехода из */           
 }
}

ПРОЦ ДвижениеТачек {
ИЗ ПРОЦ Инициализация  
                   К_ТАЧКА_ПОД_ДАТЧИКОМ,
                   У_ВКЛ_ТАЧКА;           
СОСТ Начало{
   ЕСЛИ (!К_ТАЧКА_ПОД_ДАТЧИКОМ) { 
       У_ВКЛ_ТАЧКА = ВКЛ;       
   } 
   ЗАЦИКЛИТЬ; /* снимем контроль ошибки по отсутствию перехода из */        
 }
}
}



